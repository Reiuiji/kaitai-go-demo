// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package main

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)


/**
 * Binary demo type for testing complex types
 */

type BinaryDemo_Classification int
const (
	BinaryDemo_Classification__Unknown BinaryDemo_Classification = 0
	BinaryDemo_Classification__Ps4 BinaryDemo_Classification = 1
	BinaryDemo_Classification__Ps5 BinaryDemo_Classification = 2
	BinaryDemo_Classification__Xbox BinaryDemo_Classification = 3
	BinaryDemo_Classification__Steam BinaryDemo_Classification = 4
)
type BinaryDemo struct {
	Header *BinaryDemo_Header
	Body *BinaryDemo_Body
	Message *BinaryDemo_Message
	Entries *BinaryDemo_BlockEntries
	_io *kaitai.Stream
	_root *BinaryDemo
	_parent interface{}
	_raw_Entries []byte
}
func NewBinaryDemo() *BinaryDemo {
	return &BinaryDemo{
	}
}

func (this *BinaryDemo) Read(io *kaitai.Stream, parent interface{}, root *BinaryDemo) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewBinaryDemo_Header()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp1
	tmp2 := NewBinaryDemo_Body()
	err = tmp2.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Body = tmp2
	tmp3 := NewBinaryDemo_Message()
	err = tmp3.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Message = tmp3
	tmp4, err := this._io.ReadBytes(int(16))
	if err != nil {
		return err
	}
	tmp4 = tmp4
	this._raw_Entries = tmp4
	_io__raw_Entries := kaitai.NewStream(bytes.NewReader(this._raw_Entries))
	tmp5 := NewBinaryDemo_BlockEntries()
	err = tmp5.Read(_io__raw_Entries, this, this._root)
	if err != nil {
		return err
	}
	this.Entries = tmp5
	return err
}
type BinaryDemo_Body struct {
	Id uint16
	Float4 float32
	Float8 float64
	Count uint8
	_io *kaitai.Stream
	_root *BinaryDemo
	_parent *BinaryDemo
}
func NewBinaryDemo_Body() *BinaryDemo_Body {
	return &BinaryDemo_Body{
	}
}

func (this *BinaryDemo_Body) Read(io *kaitai.Stream, parent *BinaryDemo, root *BinaryDemo) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Id = uint16(tmp6)
	tmp7, err := this._io.ReadF4be()
	if err != nil {
		return err
	}
	this.Float4 = float32(tmp7)
	tmp8, err := this._io.ReadF8be()
	if err != nil {
		return err
	}
	this.Float8 = float64(tmp8)
	tmp9, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Count = tmp9
	if !(this.Count >= 0) {
		return kaitai.NewValidationLessThanError(0, this.Count, this._io, "/types/body/seq/3")
	}
	if !(this.Count <= 200) {
		return kaitai.NewValidationGreaterThanError(200, this.Count, this._io, "/types/body/seq/3")
	}
	return err
}
type BinaryDemo_Block struct {
	Value uint32
	_io *kaitai.Stream
	_root *BinaryDemo
	_parent *BinaryDemo_BlockEntries
}
func NewBinaryDemo_Block() *BinaryDemo_Block {
	return &BinaryDemo_Block{
	}
}

func (this *BinaryDemo_Block) Read(io *kaitai.Stream, parent *BinaryDemo_BlockEntries, root *BinaryDemo) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Value = uint32(tmp10)
	return err
}
type BinaryDemo_BlockEntries struct {
	Block []*BinaryDemo_Block
	_io *kaitai.Stream
	_root *BinaryDemo
	_parent *BinaryDemo
}
func NewBinaryDemo_BlockEntries() *BinaryDemo_BlockEntries {
	return &BinaryDemo_BlockEntries{
	}
}

func (this *BinaryDemo_BlockEntries) Read(io *kaitai.Stream, parent *BinaryDemo, root *BinaryDemo) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp11, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp11 {
			break
		}
		tmp12 := NewBinaryDemo_Block()
		err = tmp12.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Block = append(this.Block, tmp12)
	}
	return err
}
type BinaryDemo_Header struct {
	Magic uint16
	Classification BinaryDemo_Classification
	_io *kaitai.Stream
	_root *BinaryDemo
	_parent *BinaryDemo
}
func NewBinaryDemo_Header() *BinaryDemo_Header {
	return &BinaryDemo_Header{
	}
}

func (this *BinaryDemo_Header) Read(io *kaitai.Stream, parent *BinaryDemo, root *BinaryDemo) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp13, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Magic = uint16(tmp13)
	if !(this.Magic == 61680) {
		return kaitai.NewValidationNotEqualError(61680, this.Magic, this._io, "/types/header/seq/0")
	}
	tmp14, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Classification = BinaryDemo_Classification(tmp14)
	return err
}
type BinaryDemo_Message struct {
	Name string
	_io *kaitai.Stream
	_root *BinaryDemo
	_parent *BinaryDemo
}
func NewBinaryDemo_Message() *BinaryDemo_Message {
	return &BinaryDemo_Message{
	}
}

func (this *BinaryDemo_Message) Read(io *kaitai.Stream, parent *BinaryDemo, root *BinaryDemo) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp15, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp15 = tmp15
	this.Name = string(tmp15)
	return err
}
